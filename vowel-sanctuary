#!/usr/bin/env ruby

require 'securerandom'

Homoglyphs = [
  %w{ Α А },
  %w{ Ε Е ꓰ },
  %w{ Ι І Ӏ },
  %w{ Ο О },
]

All = Homoglyphs.flatten

Password = Struct.new(:glyphs, :entropy, :visible)

def pick(ar)
  index = SecureRandom.random_number(ar.size)
  ar[index]
end

def gen
  pw = Password.new([], 0.0, 0.0)
  100.times do
    yield pw
    glyph = pick(All)
    set = Homoglyphs.find do |set|
      set.include?(glyph)
    end
    pw.glyphs << glyph
    pw.entropy += Math.log(All.size, 2)
    pw.visible += Math.log(set.size, 2)
  end
  raise 'ELOOP'
end

def hoot(message)
  return puts message unless STDOUT.tty?

  case `tput colors`.strip.to_i
  when 256
    blue    = "\e[038;5;68m"
    brown   = "\e[038;5;%dm" % [ 94, 124, 166, 172][rand(3)]
    yellow  = "\e[038;5;%dm" % [ 34, 113, 190, 227][rand(3)]
    off     = "\e[0m"
  when 8
    blue    = "\e[034m"
    brown   = "\e[031m"
    yellow  = "\e[032m"
    off     = "\e[0m"
  when -1, 15, 16, 52, 64, 88
    blue = brown = yellow = off = ''
  else
    blue = brown = yellow = off = ''
  end

  eye = "o@^-"[rand(4)]
  beak = ",.o"[rand(2)]
  case rand(3)
  when 0 then arml, armr = '/', '\\'
  when 1 then arml, armr = '^', '^'
  when 2 then arml, armr = '=', '='
  end

  owl = [
    "       ",
    "  " + brown + '{' + yellow + eye + beak + eye + brown + '}',
    "  " + brown + arml + ')_)' + armr,
    "   " + yellow + '" " ',
  ]

  bubble = [
    blue + " ╭" + '─' * message.size   + "╮",
    blue + "╶┤" + off + message + blue + "│",
    blue + " ╰" + '─' * message.size   + "╯",
    "",
  ]

  puts owl.zip(bubble).map{ |o,b| o + b }
  print off
end

Help = <<'...'
vowel-sanctuary: print a Unicode password that looks like vowels

Two strings are printed...

  $ vowel-sanctuary | cat
  ОΟӀΙΑОΕΑІЕΑΑА (40⚄ 15☭)
  ЕӀЕꓰӀΟΙΙЕЕΑАΕꓰІΑΟІΑꓰΑАӀΕӀΑꓰꓰΑ (96⚄ 40☭)

...with their indicators of entropy appended:

  Actual Entropy (⚄):
    The entropy of the password if it has never been seen, the
    usual meaning of password entropy.

  Visual Entropy (☭):
    The entropy of your password if someone has spied on you over
    your shoulder, and knows which homoglyphs were used in each
    position, but doesn't know the actual glyphs used.  For
    non-vowel-sanctuary passwords, this entropy is 0.

The first has an entropy of 40+ bits; the second has a _visual_
entropy of 40+ bits.

Closer inspection reveals that the vowels are not what they seem:

  $ vowel-sanctuary | cat -vet
  -^U-^@-^@-^@-^Q-^S-^Y-^@-^S-^F-^P-^Y-^^ (40-^ZM-^D 18-^X)$
  -^U-^U-^_-^F-^P-^_-^P-^Q-^U-^_-^U-^U-^U-^F-^P-^@-^Y-^....

...

if ARGV.join.include?('-h')
  puts Help
  exit
end

target = 40

gen do |pw|
  if pw.entropy >= target
    hoot '%s (%d⚄ %d☭)' % [pw.glyphs.join, target, pw.visible]
    break
  end
end

gen do |pw|
  if pw.visible >= target
    hoot '%s (%d⚄ %d☭)' % [pw.glyphs.join, pw.entropy, target]
    break
  end
end
